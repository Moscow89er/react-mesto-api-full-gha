{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._url = options.url;\n    this._headers = options.headers;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  getUserInfo() {\n    return fetch(this._url + '/users/me', {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  getInitialCards() {\n    return fetch(this._url + '/cards', {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  editUserInfo(userData) {\n    return fetch(this._url + '/users/me', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: userData.username,\n        about: userData.about\n      })\n    }).then(this._checkResponse);\n  }\n  editUserAvatar(userData) {\n    return fetch(this._url + '/users/me/avatar', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: userData.avatarlink\n      })\n    }).then(this._checkResponse);\n  }\n  addNewCard(data) {\n    return fetch(this._url + '/cards', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.cardname,\n        link: data.cardlink,\n        cardId: data._id\n      })\n    }).then(this._checkResponse);\n  }\n  deleteCard(cardId) {\n    return fetch(this._url + `/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  likeCard(cardId) {\n    return fetch(this._url + `/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  dislikeCard(cardId) {\n    return fetch(this._url + `/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  getData() {\n    return Promise.all([this.getInitialCards(), this.getUserInfo()]);\n  }\n}\n;\nexport const api = new Api({\n  url: 'https://mesto.nomoreparties.co/v1/cohort-62',\n  headers: {\n    authorization: 'f222d885-e074-4ace-9dec-53e306a04a75',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"names":["Api","constructor","options","_url","url","_headers","headers","_checkResponse","res","ok","json","Promise","reject","status","getUserInfo","fetch","method","then","getInitialCards","editUserInfo","userData","body","JSON","stringify","name","username","about","editUserAvatar","avatar","avatarlink","addNewCard","data","cardname","link","cardlink","cardId","_id","deleteCard","likeCard","dislikeCard","getData","all","api","authorization"],"sources":["C:/Users/Batumi_89er/dev/mesto-react/src/utils/api.js"],"sourcesContent":["class Api {\r\n    constructor(options) {\r\n      this._url = options.url;\r\n      this._headers = options.headers;\r\n    };\r\n    _checkResponse(res) {\r\n        if (res.ok) {\r\n            return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n    };\r\n    getUserInfo() {\r\n        return fetch(this._url + '/users/me', {\r\n            method: 'GET',\r\n            headers: this._headers\r\n        })\r\n        .then(this._checkResponse);\r\n    };\r\n    getInitialCards() {\r\n        return fetch(this._url + '/cards', {\r\n            method: 'GET',\r\n            headers: this._headers\r\n        })\r\n        .then(this._checkResponse);\r\n    };\r\n    editUserInfo(userData) {\r\n        return fetch(this._url + '/users/me', {\r\n            method: 'PATCH',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                name: userData.username,\r\n                about: userData.about\r\n            })\r\n        })\r\n        .then(this._checkResponse);\r\n    };\r\n    editUserAvatar(userData) {\r\n        return fetch(this._url + '/users/me/avatar', {\r\n            method: 'PATCH',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                avatar: userData.avatarlink\r\n            })\r\n        })\r\n        .then(this._checkResponse);\r\n    };\r\n    addNewCard(data) {\r\n        return fetch(this._url + '/cards', {\r\n            method: 'POST',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                name: data.cardname,\r\n                link: data.cardlink,\r\n                cardId: data._id\r\n            })\r\n        })\r\n        .then(this._checkResponse);\r\n    };\r\n    deleteCard(cardId) {\r\n        return fetch (this._url + `/cards/${cardId}`, {\r\n            method: 'DELETE',\r\n            headers: this._headers\r\n        })\r\n        .then(this._checkResponse);\r\n    };\r\n    likeCard(cardId) {\r\n        return fetch (this._url + `/cards/${cardId}/likes`, {\r\n            method: 'PUT',\r\n            headers: this._headers\r\n        })\r\n        .then(this._checkResponse);\r\n    };\r\n    dislikeCard(cardId) {\r\n        return fetch (this._url + `/cards/${cardId}/likes`, {\r\n            method: 'DELETE',\r\n            headers: this._headers\r\n        })\r\n        .then(this._checkResponse);\r\n    };\r\n    getData() {\r\n        return Promise.all([this.getInitialCards(), this.getUserInfo()]);\r\n    };\r\n  };\r\n  \r\nexport const api = new Api ({\r\n    url: 'https://mesto.nomoreparties.co/v1/cohort-62',\r\n    headers: {\r\n      authorization: 'f222d885-e074-4ace-9dec-53e306a04a75',\r\n      'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\n "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}